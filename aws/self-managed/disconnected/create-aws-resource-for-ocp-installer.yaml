- name: Create EC2 Instance for Mirror Registry OCP Installer and Proxy
  hosts: localhost
  vars:
    prefix_for_name: project_name
    aws_key_name: "{{ prefix_for_name }}_ansible"
    aws_instance_type: t2.large
    aws_ami: ami-04698733964af06d5
    instance_count: 1
    aws_region: ap-southeast-1
    aws_security_group_for_ec2: ping_ssh_8443
    aws_egress_vpc_name: "{{ prefix_for_name }}-egress"
    aws_disconnected_vpc_name: "{{ prefix_for_name }}-disconnected"
    openshift_base_domain: example.com
    openshift_cluster_name_suffix: xt1
    openshift_cluster_name: "{{ prefix_for_name }}-{{ openshift_cluster_name_suffix }}"
    aws_instance_name: "{{ openshift_cluster_name }}-installer"
    aws_iam_role_name: "{{ prefix_for_name }}-ocp-install-ec2"
    ssh_public_key_for_ec2_and_openshit_node: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDu9xbA2hicBBlrb9dadC0p+z93CfhOJQ+o1MGb3yYe3WvV9KrQ8mYBsYlFXm5oc20lZHQBKADhtOHXgDn4Qj429MjUUMGuNOoFU1ZBDblDsKzK+VSQ+IUBdUDBJbUQmsvs9XZ5E3w7Eiq0w8W9z6LuJHvC2VUnKhZAizLVjccX43NPskD0+d7ZuZ8yr/yo0gwN7XiiUMGoeOja8orkInNE2alZIfeNI8N2wQS3jdJoL0q/NFowAi032eYBm/or6/5u6EQg3UVcY1SX7YG5DkgogTklcHqkBZ60j/BYP5k6DohfJ6XPEl+6oPwl6wH/y4GXRxdTuBJ3u9PidKitAp7WndbJgdjhMfcJLlLhhXwrV4Zig5VlyaB80MvzW5Rx/NHlEBtiq+v+GWyz5rPkdfvINNVyHo4Cs7OkpCJTPOrfSLOQkxO4WoxXe4F5hmLiyeRNAKZB1VPQYbGUHuiuqEgxfg5Ao4ASNNZy/ZJH3gScVDFZfLMwZtuBRLAY6X1f4n8= root@dell-r640-gcsosp-01.lab.eng.rdu2.redhat.com"
  tasks:

  - name: Creae ssh key pair using the given public key
    amazon.aws.ec2_key:
      name: "{{ aws_key_name }}"
      region: "{{ aws_region }}"
      key_material: "{{ ssh_public_key_for_ec2_and_openshit_node }}"
      state: present

  - name: Gather Information about Egress VPC
    amazon.aws.ec2_vpc_net_info:
      filters:
        "tag:Name": "{{ aws_egress_vpc_name }}"
      region: "{{ aws_region }}"
    register: egress_vpc_info

  - name: Query for any existing subnet(s) in Egress VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ egress_vpc_info.vpcs[0].vpc_id }}"
    register: egress_subnet_info

  - name: Gather Information about Disconnected VPC
    amazon.aws.ec2_vpc_net_info:
      filters:
        "tag:Name": "{{ aws_disconnected_vpc_name }}"
      region: "{{ aws_region }}"
    register: disconnected_vpc_info

  - name: Query for any existing subnet(s) in Disconnected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ disconnected_vpc_info.vpcs[0].vpc_id }}"
    register: disconnected_subnet_info

  - name: Query for subnetID for AZ1 in Disconnected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ disconnected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_disconnected_vpc_name }}-subnet-az1"
    register: disconnected_subnet_info_az1

  - name: Query for subnetID for AZ2 in Disconnected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ disconnected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_disconnected_vpc_name }}-subnet-az2"
    register: disconnected_subnet_info_az2

  - name: Query for subnetID for AZ3 in Disconnected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ disconnected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_disconnected_vpc_name }}-subnet-az3"
    register: disconnected_subnet_info_az3

  - name: Create DNS route53 private domain 
    amazon.aws.route53_zone:
      vpc_id: "{{ disconnected_vpc_info.vpcs[0].vpc_id }}"
      vpc_region: "{{ aws_region }}"
      zone: "{{ openshift_cluster_name }}.{{ openshift_base_domain }}" 
      state: present
    register: hosted_zone_info

  - name: Attach route53 private domain with Egress VPC
    shell: |
      aws route53 associate-vpc-with-hosted-zone \
       --hosted-zone-id {{ hosted_zone_info.zone_id }} \
       --vpc VPCRegion={{ aws_region }},VPCId={{ egress_vpc_info.vpcs[0].vpc_id }} --region {{ aws_region }}

  - name: Create a security group for Mirror Registry to use 22,8443 and icmp
    amazon.aws.ec2_security_group:
      name: "{{ aws_security_group_for_ec2 }}"
      description: security group for Mirror Registry to use 22,8443 and icmp
      vpc_id: "{{ egress_vpc_info.vpcs[0].vpc_id }}"
      region: "{{ aws_region }}"
      rules:
        - proto: tcp
          ports:
            - 8443
            - 3128
          cidr_ip:
            - "{{ disconnected_vpc_info.vpcs[0].cidr_block }}"
            - "{{ egress_vpc_info.vpcs[0].cidr_block }}"
        - proto: tcp
          ports: 22
          cidr_ip: 0.0.0.0/0
    register: sg_info

  - name: Provision EC2 Instance
    amazon.aws.ec2_instance:
      name: "{{ aws_instance_name }}"
      state: running
      key_name: "{{ aws_key_name }}"
      instance_type: "{{ aws_instance_type }}"
      image_id: "{{ aws_ami }}"
      wait: yes
      count: "{{ instance_count }}"
      vpc_subnet_id: "{{ egress_subnet_info.subnets[0].id }}"
      network:
        assign_public_ip: true
      region: "{{ aws_region }}"
      security_group: "{{ aws_security_group_for_ec2 }}"
      instance_role: "{{ aws_iam_role_name }}"
      tags:
        Automation: sputhenp_ocp_installer
      volumes:
        - device_name: /dev/sda1
          ebs:
            volume_type: gp3
            volume_size: 100
            delete_on_termination: true
    register: ec2_info

  - name: Set Variable to use for instances
    set_stats:
      data:
        disconnected_subnet_id_a: "{{ disconnected_subnet_info_az1.subnets[0].subnet_id }}"
        disconnected_subnet_id_b: "{{ disconnected_subnet_info_az2.subnets[0].subnet_id }}"
        disconnected_subnet_id_c: "{{ disconnected_subnet_info_az3.subnets[0].subnet_id }}"
        hosted_zone_id_for_domain: "{{ hosted_zone_info.zone_id }}"
        disconnected_vpc_cidr: "{{ disconnected_vpc_info.vpcs[0].cidr_block }}"
        disconnected_vpc_id: "{{ disconnected_vpc_info.vpcs[0].vpc_id }}"
