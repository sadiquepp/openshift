---
- name: Create Disconnected Environment
  hosts: localhost
  gather_facts: false
  vars:
    prefix_for_name: project_name
    aws_region: ap-southeast-1
    aws_availability_zone_1: "{{ aws_region }}a"
    aws_availability_zone_2: "{{ aws_region }}b"
    aws_availability_zone_3: "{{ aws_region }}c"
    aws_disconnected_vpc_name: "{{ prefix_for_name }}-disconnected"
    aws_disconnected_vpc_cidr: 172.16.0.0/16
    aws_egress_vpc_name: "{{ prefix_for_name }}-egress"
    aws_egress_vpc_cidr: 172.17.0.0/16
    aws_disconnected_subnet_cidr_az1: 172.16.1.0/24
    aws_disconnected_subnet_cidr_az2: 172.16.2.0/24
    aws_disconnected_subnet_cidr_az3: 172.16.3.0/24
    aws_egress_subnet_public_az1: 172.17.1.0/24
    aws_egress_subnet_public_az2: 172.17.2.0/24
    aws_egress_subnet_public_az3: 172.17.3.0/24
    aws_egress_subnet_private_az1: 172.17.4.0/24
    aws_egress_subnet_private_az2: 172.17.5.0/24
    aws_egress_subnet_private_az3: 172.17.6.0/24
    aws_security_group_for_endpoint: vpc-endpoint-allow
    aws_iam_role_name: "{{ prefix_for_name }}-ocp-install-ec2"
  tasks:

  - name: Create a role for ec2 instance to assume to install openshift
    community.aws.iam_role:
      name: "{{ aws_iam_role_name }}"
      assume_role_policy_document: "{{ lookup('file','policy.json') }}"
      managed_policies:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/ResourceGroupsandTagEditorFullAccess
        - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
        - arn:aws:iam::aws:policy/ServiceQuotasFullAccess
        - arn:aws:iam::aws:policy/CloudFrontFullAccess

  - name: Create Disconnected VPC
    amazon.aws.ec2_vpc_net:
      name: "{{ aws_disconnected_vpc_name }}"
      state: present
      cidr_block: "{{ aws_disconnected_vpc_cidr }}"
      region: "{{ aws_region }}"
    register: disconnected_vpc_info

  - name: Create Egress VPC
    amazon.aws.ec2_vpc_net:
      name: "{{ aws_egress_vpc_name }}"
      state: present
      cidr_block: "{{ aws_egress_vpc_cidr }}"
      region: "{{ aws_region }}"
    register: egress_vpc_info

  - name: Create Disconnected Private Subnet on Az1
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ disconnected_vpc_info.vpc.id }}"
      cidr: "{{ aws_disconnected_subnet_cidr_az1 }}"
      region: "{{ aws_region }}"
      az: "{{ aws_availability_zone_1 }}"
      tags:
        Name: "{{ aws_disconnected_vpc_name }}-subnet-az1"
    register: disconnected_subnet_info_az1

  - name: Create Disconnected Private Subnet on Az2
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ disconnected_vpc_info.vpc.id }}"
      cidr: "{{ aws_disconnected_subnet_cidr_az2 }}"
      region: "{{ aws_region }}"
      az: "{{ aws_availability_zone_2 }}"
      tags:
        Name: "{{ aws_disconnected_vpc_name }}-subnet-az2"
    register: disconnected_subnet_info_az2

  - name: Create Disconnected Private Subnet on Az3
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ disconnected_vpc_info.vpc.id }}"
      cidr: "{{ aws_disconnected_subnet_cidr_az3 }}"
      region: "{{ aws_region }}"
      az: "{{ aws_availability_zone_3 }}"
      tags:
        Name: "{{ aws_disconnected_vpc_name }}-subnet-az3"
    register: disconnected_subnet_info_az3

  - name: Create Egress Public Subnet Az1
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ egress_vpc_info.vpc.id }}"
      cidr: "{{ aws_egress_subnet_public_az1 }}"
      region: "{{ aws_region }}"
      az: "{{ aws_availability_zone_1 }}"
      tags:
        Name: "{{ aws_egress_vpc_name }}-public-az1"
    register: egress_public_subnet_info_az1

  - name: Create Internet Gateway on Egress VPC
    amazon.aws.ec2_vpc_igw:
      vpc_id: "{{ egress_vpc_info.vpc.id }}"
      state: present
      region: "{{ aws_region }}"
      tags:
        Name: "{{ aws_egress_vpc_name }}-igw"
    register: igw

  - name: Create Transit Gateway
    community.aws.ec2_transit_gateway:
      state: present
      region: "{{ aws_region }}"
      description: Transit Gateway for Disconnected
      tags:
        Name: "{{ prefix_for_name }}-transitgw"
    register: transit_gateway

  - name: Attach Disconnected Network to transit Gateway
    community.aws.ec2_transit_gateway_vpc_attachment:
      name: Disconnected-Attach
      state: present
      region: "{{ aws_region }}"
      transit_gateway: "{{ transit_gateway.transit_gateway.transit_gateway_id  }}"
      subnets:
        - "{{ disconnected_subnet_info_az1.subnet.id }}"
        - "{{ disconnected_subnet_info_az2.subnet.id }}"
        - "{{ disconnected_subnet_info_az3.subnet.id }}"
    register: transit_gateway_attachment_disconnected

  - debug:
      var: transit_gateway_attachment_disconnected

  - name: Attach Egress Network to transit Gateway
    community.aws.ec2_transit_gateway_vpc_attachment:
      name: Egress-Attach
      state: present
      region: "{{ aws_region }}"
      transit_gateway: "{{ transit_gateway.transit_gateway.transit_gateway_id  }}"
      subnets:
        - "{{ egress_public_subnet_info_az1.subnet.id }}"
    register: transit_gateway_attachment_egress

  - debug:
      var: transit_gateway_attachment_egress

  - name: Set route to egress vpc from disconnected vpc via transit gateway
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ disconnected_vpc_info.vpc.id }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ disconnected_subnet_info_az1.subnet.id }}"
        - "{{ disconnected_subnet_info_az2.subnet.id }}"
        - "{{ disconnected_subnet_info_az3.subnet.id }}"
      tags:
        Name: "{{ prefix_for_name }}-disconnected-subnet-rt"
      routes:
        - dest: "{{ aws_egress_vpc_cidr }}"
          gateway_id: "{{ transit_gateway.transit_gateway.transit_gateway_id }}"
    register: disconnected_rt

  - name: Connect Engress Public Subnet to IGW and gateway for Disconnected VPC to be transit gateway
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ egress_vpc_info.vpc.id }}"
      region: "{{ aws_region }}"
      tags:
        Name: "{{ prefix_for_name }}-egress-rt-igw"
      subnets:
        - "{{ egress_public_subnet_info_az1.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
        - dest: "{{ aws_disconnected_vpc_cidr }}"
          gateway_id: "{{ transit_gateway.transit_gateway.transit_gateway_id }}"
    register: egress_rt_public

  - name: Create a security group for VPC endpoints to use 443
    amazon.aws.ec2_security_group:
      name: "{{ aws_security_group_for_endpoint }}"
      description: security group for VPC EndPoints
      vpc_id: "{{ disconnected_vpc_info.vpc.id }}"
      region: "{{ aws_region }}"
      rules:
        - proto: tcp
          ports: 443
          cidr_ip: "{{ aws_disconnected_vpc_cidr }}"
          rule_desc: "allow all on port 443 on endpoint"
    register: sg_info_endpoint

  - name: Create S3 VPC Endpoints required for Openshift installation in disconnected mode
    amazon.aws.ec2_vpc_endpoint:
      state: present
      region: "{{ aws_region }}"
      vpc_id: "{{ disconnected_vpc_info.vpc.id }}"
      service: "com.amazonaws.{{ aws_region }}.s3"
      route_table_ids:
        - "{{ disconnected_rt.route_table.route_table_id }}"
      tags:
        Name: "{{ prefix_for_name }}-s3-disconnected"

  - name: Create STS/EBS/EC2/ELB VPC Endpoints required for Openshift installation in disconnected mode
    amazon.aws.ec2_vpc_endpoint:
      state: present
      region: "{{ aws_region }}"
      vpc_id: "{{ disconnected_vpc_info.vpc.id }}"
      vpc_endpoint_type: Interface
      service: "com.amazonaws.{{ aws_region }}.{{ item }}"
      vpc_endpoint_subnets:
        - "{{ disconnected_subnet_info_az1.subnet.id }}"
      vpc_endpoint_security_groups:
        - "{{ sg_info_endpoint.group_id }}"     
      tags:
        Name: "{{ prefix_for_name }}-{{ item }}-disconnected"
    with_items:
      - ec2
      - sts
      - elasticloadbalancing
      - ecr.api
      - ecr.dkr
