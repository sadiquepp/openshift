- name: Create EC2 Instance for OCP Installer and Proxy
  hosts: localhost
  vars:
    prefix_for_name: project_name
    aws_key_name: "{{ prefix_for_name }}_ansible"
    aws_instance_type: t2.medium
    aws_ami: ami-04698733964af06d5
    instance_count: 1
    aws_region: ap-southeast-1
    aws_security_group_for_ec2: ping_ssh_8443
    aws_connected_vpc_name: "{{ prefix_for_name }}-connected"
    openshift_base_domain: example.com
    openshift_cluster_name_suffix: xx1
    openshift_cluster_name: "{{ prefix_for_name }}-{{ openshift_cluster_name_suffix }}"
    aws_instance_name: "{{ openshift_cluster_name }}-installer"
    aws_iam_role_name: "{{ prefix_for_name }}-ocp-install-ec2"
    ssh_public_key_for_ec2_and_openshit_node: ""
  tasks:

  - name: Create a role for ec2 instance to assume to install openshift
    amazon.aws.iam_role:
      name: "{{ aws_iam_role_name }}"
      assume_role_policy_document: "{{ lookup('file','policy.json') }}"

  - name: Create Installer policy and attach to the role
    amazon.aws.iam_policy:
      policy_name: openshift-install-cluster-4-18
      iam_type: role
      iam_name: "{{ aws_iam_role_name }}"
      policy_json: "{{ lookup('template', '4.18/install-cluster-policy.json') }}"
      state: present

  - name: Create CCOCTL policy and attach to the role
    amazon.aws.iam_policy:
      policy_name: ccoctl-policy-4-18
      iam_type: role
      iam_name: "{{ aws_iam_role_name }}"
      policy_json: "{{ lookup('template', '4.18/ccoctl-policy.json') }}"
      state: present

  - name: Create policy to Delete Cluster and attach to the role
    amazon.aws.iam_policy:
      policy_name: openshift-delete-cluster-4-18
      iam_type: role
      iam_name: "{{ aws_iam_role_name }}"
      policy_json: "{{ lookup('template', '4.18/delete-cluster-policy.json') }}"
      state: present

  - name: Creae ssh key pair using the given public key
    amazon.aws.ec2_key:
      name: "{{ aws_key_name }}"
      region: "{{ aws_region }}"
      key_material: "{{ ssh_public_key_for_ec2_and_openshit_node }}"
      state: present

  - name: Gather Information about Connected VPC
    amazon.aws.ec2_vpc_net_info:
      filters:
        "tag:Name": "{{ aws_connected_vpc_name }}"
      region: "{{ aws_region }}"
    register: connected_vpc_info

  - name: Query for any existing subnet(s) in Connected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ connected_vpc_info.vpcs[0].vpc_id }}"
    register: connected_subnet_info

  - name: Query for Private subnetID for AZ1 in Connected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ connected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_connected_vpc_name }}-subnet-az1"
    register: connected_subnet_info_az1

  - name: Query for Private subnetID for AZ2 in Connected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ connected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_connected_vpc_name }}-subnet-az2"
    register: connected_subnet_info_az2

  - name: Query for Private subnetID for AZ3 in Connected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ connected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_connected_vpc_name }}-subnet-az3"
    register: connected_subnet_info_az3

  - name: Query for Public subnetID for AZ1 in Connected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ connected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_connected_vpc_name }}-public-subnet-az1"
    register: connected_public_subnet_info_az1

  - name: Query for Public subnetID for AZ2 in Connected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ connected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_connected_vpc_name }}-public-subnet-az2"
    register: connected_public_subnet_info_az2

  - name: Query for Public subnetID for AZ3 in Connected VPC
    amazon.aws.ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        vpc-id:  "{{ connected_vpc_info.vpcs[0].vpc_id }}"
        "tag:Name": "{{ aws_connected_vpc_name }}-public-subnet-az3"
    register: connected_public_subnet_info_az3

  - name: Create DNS route53 private domain 
    amazon.aws.route53_zone:
      vpc_id: "{{ connected_vpc_info.vpcs[0].vpc_id }}"
      vpc_region: "{{ aws_region }}"
      zone: "{{ openshift_cluster_name }}.{{ openshift_base_domain }}" 
      state: present
    register: hosted_zone_info

  - name: Create a security group for Mirror Registry to use 22,8443 and icmp
    amazon.aws.ec2_security_group:
      name: "{{ aws_security_group_for_ec2 }}"
      description: security group for Mirror Registry to use 22,8443 and icmp
      vpc_id: "{{ connected_vpc_info.vpcs[0].vpc_id }}"
      region: "{{ aws_region }}"
      rules:
        - proto: tcp
          ports:
            - 8443
            - 3128
          cidr_ip:
            - "{{ connected_vpc_info.vpcs[0].cidr_block }}"
        - proto: tcp
          ports:
            - 22
            - 5999
          cidr_ip: 0.0.0.0/0
    register: sg_info

  - name: Provision EC2 Instance
    amazon.aws.ec2_instance:
      name: "{{ aws_instance_name }}"
      state: running
      key_name: "{{ aws_key_name }}"
      instance_type: "{{ aws_instance_type }}"
      image_id: "{{ aws_ami }}"
      wait: yes
      count: "{{ instance_count }}"
      vpc_subnet_id: "{{ connected_public_subnet_info_az1.subnets[0].id }}"
      network:
        assign_public_ip: true
      region: "{{ aws_region }}"
      security_group: "{{ aws_security_group_for_ec2 }}"
      instance_role: "{{ aws_iam_role_name }}"
      tags:
        Automation: "openshift_connected_installer"
      volumes:
        - device_name: /dev/sda1
          ebs:
            volume_type: gp2
            volume_size: 50
            delete_on_termination: true
    register: ec2_info

  - name: Set Variable to use for instances
    set_stats:
      data:
        connected_subnet_id_a: "{{ connected_subnet_info_az1.subnets[0].subnet_id }}"
        connected_subnet_id_b: "{{ connected_subnet_info_az2.subnets[0].subnet_id }}"
        connected_subnet_id_c: "{{ connected_subnet_info_az3.subnets[0].subnet_id }}"
        connected_public_subnet_id_a: "{{ connected_public_subnet_info_az1.subnets[0].subnet_id }}"
        connected_public_subnet_id_b: "{{ connected_public_subnet_info_az2.subnets[0].subnet_id }}"
        connected_public_subnet_id_c: "{{ connected_public_subnet_info_az3.subnets[0].subnet_id }}"
        hosted_zone_id_for_domain: "{{ hosted_zone_info.zone_id }}"
        connected_vpc_cidr: "{{ connected_vpc_info.vpcs[0].cidr_block }}"
        connected_vpc_id: "{{ connected_vpc_info.vpcs[0].vpc_id }}"
